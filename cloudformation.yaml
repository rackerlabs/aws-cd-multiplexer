---
AWSTemplateFormatVersion: '2010-09-09'
Description: Simple Application Merge Solution
Parameters:
  ArtifactBucket:
    Type: String
    Description: Bucket to store resulting Artifacts in.
  BuildSourceBucket:
    Type: String
    Description: Code Build Source Bucket Name.
  BuildSourceSpec:
    Type: String
    Description: Path to Buildspec file.
    Default: buildspec.yml
  BuildSourceName:
    Type: String
    Default: build.zip
    Description: Name of the build source file for CodeBuild.
  ConfigBucket:
    Type: String
    Description: Bucket storing the multiplexer configuration file.
  ConfigName:
    Type: String
    Description: Name of the CodeDeploy multiplexer configuration JSON file.
    Default: multiplexer.json
  GithubToken:
    Type: String
    NoEcho: true
    Description: Github Token with access to download repositories as Zip files.
  LogLevel:
    Type: String
    Description: Log level for webhook Lambda function.
    Default: WARNING
    AllowedValues:
      - CRITICAL
      - DEBUG
      - ERROR
      - INFO
      - WARNING
Resources:
  StorageBucket:
    Type: 'AWS::S3::Bucket'
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: 'CodeBuildS3AndLogging'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'logs:*'
                Resource: '*'
              - Effect: 'Allow'
                Action: 's3:*'
                Resource:
                  - Fn::Join: [ '', [ 'arn:aws:s3:::', !Ref 'ArtifactBucket', '/*' ]]
                  - Fn::Join: [ '', [ 'arn:aws:s3:::', !Ref 'BuildSourceBucket', '/*' ]]
                  - Fn::Join: [ '', [ 'arn:aws:s3:::', !Ref 'ConfigBucket', '/', !Ref 'ConfigName' ]]
  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: 'NO_ARTIFACTS'
      Description: 'CodeBuild project for Application repo merging.'
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        EnvironmentVariables:
          - Name: 'ARTIFACT_BUCKET'
            Value: !Ref 'ArtifactBucket'
          - Name: 'MULTIPLEXER_CONFIG_BUCKET'
            Value: !Ref 'ConfigBucket'
          - Name: 'MULTIPLEXER_CONFIG_NAME'
            Value: !Ref 'ConfigName'
          - Name: 'GITHUB_TOKEN'
            Value: !Ref 'GithubToken'
        Image: 'aws/codebuild/python:3.5.2'
        Type: 'LINUX_CONTAINER'
      Name:
        Fn::Join: [ '-', [ !Ref 'AWS::StackName', 'CodeBuild' ]]
      ServiceRole: !Ref 'CodeBuildRole'
      Source:
        BuildSpec: !Ref 'BuildSourceSpec'
        Location: !Join [ '/', [ !Ref 'BuildSourceBucket', !Ref 'BuildSourceName' ]]
        Type: 'S3'
  CustomCFExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CustomCFFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.execute'
      Role:
        Fn::GetAtt:
          - 'CustomCFExecutionRole'
          - 'Arn'
      Runtime: 'python3.6'
      Timeout: 5
      Code:
        ZipFile: |
          import random
          import hashlib
          import cfnresponse
          def execute(event, context):
              request_type = event['RequestType']
              stack_id = event['StackId'].split('/').pop()
              physical_resource = 'HashGen-' + stack_id
              # Nothing to delete so just report back success.
              if request_type == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_resource)
              try:
                  new_hash = hashlib.sha224(str(random.random()).encode('utf-8')).hexdigest()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS,
                                   {'Hash': new_hash}, physical_resource)
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, physical_resource)

  HashGen:
    DependsOn: CustomCFFunction
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - 'CustomCFFunction'
          - 'Arn'

  ### Github Web hook Code ###
  GithubWebhookRoll:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: 'GithubWebhookPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: 'Allow'
                Action: 's3:*'
                Resource:
                  - Fn::Join: [ '', [ 'arn:aws:s3:::', !Ref 'ConfigBucket', '/', !Ref 'ConfigName' ]]
              - Effect: 'Allow'
                Action: 'codebuild:*'
                Resource: !GetAtt
                  - CodeBuildProject
                  - Arn
  GithubWebhook:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref BuildSourceBucket
        S3Key: !Ref BuildSourceName
      Handler: 'multiplexer.webhook.github_handler'
      Environment:
        Variables:
          MULTIPLEXER_CODEBUILD_PROJECT: !Ref CodeBuildProject
          MULTIPLEXER_CONFIG_BUCKET: !Ref ConfigBucket
          MULTIPLEXER_CONFIG_NAME: !Ref ConfigName
          WEBHOOK_LOGLEVEL: !Ref LogLevel
          WEBHOOK_SECRET: !GetAtt
                  - 'HashGen'
                  - 'Hash'
      Role:
        Fn::GetAtt:
          - 'GithubWebhookRoll'
          - 'Arn'
      Runtime: 'python3.6'
  GithubWebhookApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - 'GithubWebhook'
        - 'Arn'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: 'AWS::Region'
          - ':'
          - Ref: 'AWS::AccountId'
          - ':'
          - Ref: 'GithubWebhookApi'
          - '/*'
  GithubWebhookApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Join [' ', [Ref: 'AWS::StackName', 'API']]
  GithubWebhookApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref 'GithubWebhookApi'
      ParentId: !GetAtt
        - 'GithubWebhookApi'
        - 'RootResourceId'
      PathPart: 'github'

  GithubWebhookApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Join ['', ['arn:aws:apigateway:', Ref: 'AWS::Region', ':lambda:path/2015-03-31/functions/', {"Fn::GetAtt": ["GithubWebhook", "Arn"]}, '/invocations']]
      ResourceId: !Ref 'GithubWebhookApiResource'
      RestApiId: !Ref 'GithubWebhookApi'

  GithubWebhookApiDeployment:
    DependsOn:
      - GithubWebhookApiMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref 'GithubWebhookApi'
  GithubWebhookApiStage:
    DependsOn:
      - GithubWebhookApiDeployment
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref 'GithubWebhookApiDeployment'
      RestApiId: !Ref 'GithubWebhookApi'
      StageName: 'v0'


Outputs:
  WebhookUrl:
    Value:
      !Join ['', ['https://', Ref: 'GithubWebhookApi', '.execute-api.', Ref: 'AWS::Region', '.amazonaws.com/v0/github']]
  Secret:
    Value:
      Fn::GetAtt:
        - 'HashGen'
        - 'Hash'
